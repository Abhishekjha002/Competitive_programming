class Solution {
public:
    int helper_(int r,int c, int n,int m, vector<vector<int>>& grid)
    {
        if(grid[r][c] != 1) return 0;
        
        grid[r][c] = 2;
        int count = 0;
        
        if(r-1 >= 0)
            count += helper_(r-1,c,n,m,grid);
        if(r+1 < n)
            count += helper_(r+1,c,n,m,grid);
        if(c-1 >= 0)
            count += helper_(r,c-1,n,m,grid);
        if(c+1 < m)
            count += helper_(r,c+1,n,m,grid);
        
        return count+1;
    }
    void helper(int r,int c, int n,int m, vector<vector<int>>& grid)
    {
        if(grid[r][c] != 1) return;
        
        grid[r][c] = 2;
        
        if(r-1 >= 0)
            helper(r-1,c,n,m,grid);
        if(r+1 < n)
            helper(r+1,c,n,m,grid);
        if(c-1 >= 0)
            helper(r,c-1,n,m,grid);
        if(c+1 < m)
            helper(r,c+1,n,m,grid);
    }
    int numEnclaves(vector<vector<int>>& grid) {
        
        if(grid.size() == 0)
            return 0;
        
        int n = grid.size();
        int m = grid[0].size();
        
        for(int i=0;i<m;i++)
        {
            if(grid[0][i] == 1)
            {
                helper(0,i,n,m,grid);
            }
            if(grid[n-1][i] == 1)
            {
                helper(n-1,i,n,m,grid);
            }
        }
        
        for(int i=0;i<n;i++)
        {
            if(grid[i][0] == 1)
            {
                helper(i,0,n,m,grid);
            }
            if(grid[i][m-1] == 1)
            {
                helper(i,m-1,n,m,grid);
            }
        }
        
        int count = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == 1)
                    count += helper_(i,j,n,m,grid);
            }
        }
        return count;
    }
};
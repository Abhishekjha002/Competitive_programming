You are given a m x n 2D grid initialized with these three possible values.

1. -1 - A wall or an obstacle.
2. 0 - A gate.
3. INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example:

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4

Solution :
 
class Solution {
public:
    
    void wallsAndGates(vector<vector<int>> &grid) {
        // write your code here
        
        if(grid.size() == 0 || grid[0].size() == 0)
            return;
            
        vector<vector<int>> dirN = {{-1,0},{0,-1},{1,0},{0,1}};
        
        int n = grid.size();
        int m = grid[0].size();
        
        queue<int> que;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == 0)
                {
                    que.push(i*m+j);
                }
            }
        }
        
        while(que.size() != 0)
        {
            int size = que.size();
            
            while(size--)
            {
                int ridx = que.front();
                que.pop();
                int x = ridx/m;
                int y = ridx%m;
                
                for(int i=0;i<dirN.size();i++)
                {
                    int r = x + dirN[i][0];
                    int c = y + dirN[i][1];
                    
                    if(r >= 0 && c >= 0 && r < n && c < m && grid[r][c] == 2147483647)
                    {
                        grid[r][c] = grid[x][y] + 1;
                        que.push(r*m+c);
                    }
                }
            }
            
        }
        
        
    }
};

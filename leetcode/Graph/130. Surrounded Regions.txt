class Solution {
public:
    void helper(int r,int c,int n,int m,vector<vector<char>>& board)
    {
        if(board[r][c] != 'O')  return;
        
        board[r][c] = '#';
        
        if(r-1 >= 0)
            helper(r-1,c,n,m,board);
        
        if(r+1 < n)
            helper(r+1,c,n,m,board);
        
        if(c-1 >= 0)
            helper(r,c-1,n,m,board);
        
        if(c+1 < m)
            helper(r,c+1,n,m,board);
    }
    void solve(vector<vector<char>>& board) {
        
        if(board.size() == 0)
            return;
        int n = board.size();
        int m = board[0].size();
    
        
        for(int i=0;i<m;i++)
        {
            if(board[0][i] == 'O')
            {
                helper(0,i,n,m,board);
            }
        }
        for(int i=0;i<m;i++)
        {
            if(board[n-1][i] == 'O')
            {
                helper(n-1,i,n,m,board);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(board[i][0] == 'O')
            {
                helper(i,0,n,m,board);   
            }
        }
        for(int i=0;i<n;i++)
        {
            if(board[i][m-1] == 'O')
            {
                helper(i,m-1,n,m,board);
            }
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j] == '#')
                    board[i][j] = 'O';
                else if(board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
        
        return ;
        
    }
};
class WordDictionary {
public:
    /** Initialize your data structure here. */
    class Node
    {
    public :
        int wordEnd = 0;
        vector<Node*> childs;

        Node()
        {
            this->childs.assign(26,nullptr);
            this->wordEnd = 0;
        }
    };

    Node* root = nullptr;
    WordDictionary() {
        root = new Node();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        Node* curr = root;
        int n = word.size();
        for(int i=0;i<n;i++)
        {
            int idx = word[i] - 'a';

            if(curr->childs[idx] == nullptr)
                curr->childs[idx] = new Node();

            curr = curr->childs[idx];
        }
        curr->wordEnd++;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool DFS(string word, int idx, Node* node)
    {
        if(idx == word.size())
            return node->wordEnd != 0;

        bool res = false;
        if(word[idx] == '.')
        {
            for(int i=0;i<26;i++)
            {
                if(node->childs[i] != nullptr)
                    res = res || DFS(word,idx+1,node->childs[i]);
            }
        }
        else
        {
            if(node->childs[word[idx]-'a'] != nullptr)
                res = res || DFS(word,idx+1,node->childs[word[idx]-'a']);
        }
        return res;
    }

    bool search(string word)
    {
        return DFS(word,0,root);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
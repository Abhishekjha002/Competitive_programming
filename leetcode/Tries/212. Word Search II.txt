class Solution {
public:
    class Node
    {
    public :
        bool wordEnd = false;
        vector<Node*> childs;
        string word = "";
        Node()
        {
            this->childs.assign(26,nullptr);
            this->wordEnd = false;
            this->word = "";
        }
    };
    Node* root = nullptr;
    vector<string> ans;
    int n, m;

    void insert(string word)
    {
        Node* curr = root;
        int n = word.size();
        for(int i=0;i<n;i++)
        {
            int idx = word[i] - 'a';

            if(curr->childs[idx] == nullptr)
                curr->childs[idx] = new Node();

            curr = curr->childs[idx];
        }
        curr->wordEnd = true;
        curr->word = word;
    }
    vector<vector<int>> dirN = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
    void DFS(int r, int c, Node* node, vector<vector<char>>& board)
    {
        if(node->wordEnd)
        {
            ans.push_back(node->word);
            node->wordEnd = false;
        }

        char z = board[r][c];
        board[r][c] = '$';
        for(int i=0;i<dirN.size();i++)
        {
            int x = r + dirN[i][0];
            int y = c + dirN[i][1];

            if(x >= 0 && y >= 0 && x < n && y < m && board[x][y] != '$' && node->childs[board[x][y] - 'a'] != nullptr)
                DFS(x, y, node->childs[board[x][y] - 'a'], board);
        }
        board[r][c] = z;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {

            if(board.size() == 0 || board[0].size() == 0 || words.size() == 0)   return {};

            root = new Node();

            for(string word : words)
            {
                insert(word);
            }

            n = board.size();
            m = board[0].size();

            for(int i=0;i<n;i++)
            {
                for(int j=0;j<m;j++)
                {
                    if(root->childs[board[i][j] - 'a'] != nullptr)
                        DFS (i, j, root->childs[board[i][j] - 'a'], board);
                }
            }

            return ans;

    }
};
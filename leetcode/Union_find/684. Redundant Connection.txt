class Solution {
public:
    vector<int> par;
    vector<int> setSize;

    int findPar(int vtx)
    {
        if(par[vtx] == vtx)
            return vtx;
        return par[vtx] = findPar(par[vtx]);
    }
    void mergeSet(int l1, int l2)
    {
        if(setSize[l1] < setSize[l2])
        {
            par[l1] = l2;
            setSize[l2] += setSize[l1]; 
        }
        else
        {
            par[l2] = l1;
            setSize[l1] += setSize[l2];
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {

        vector<int> ans;

        int n = edges.size();

        for(int i=0;i<n;i++)
            par.push_back(i);

        setSize.resize(n,1);

        for(vector<int> e : edges)
        {
            int x1 = e[0];
            int x2 = e[1];

            if(findPar(x1-1) == findPar(x2-1))
            {
                return {x1,x2};
            }
            else
            {
                int l1 = findPar(x1-1);
                int l2 = findPar(x2-1);
                mergeSet(l1,l2);
            }

        }
        return ans;
    }
};
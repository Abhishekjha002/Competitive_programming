class Solution {
public:
    vector<int> par;
    int findPar(int vtx)
    {
        if(par[vtx] == vtx)
            return vtx;
        return par[vtx] = findPar(par[vtx]);
    }
    int numIslands(vector<vector<char>>& grid) {
        
         if(grid.size() == 0)
            return 0;
        
        
        int n = grid.size();
        int m = grid[0].size();
        int noOfOnes = 0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                par.push_back(i*m+j);
                if(grid[i][j] == '1')
                    noOfOnes++;
            }
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == '1')
                {
                    if(j+1 < m && grid[i][j+1] == '1')
                    {
                        int p1 = findPar(i*m+j);
                        int p2 = findPar(i*m+j+1);
                        if(p1 != p2)
                        {
                            par[p1] = p2;
                            noOfOnes--;
                        }
                    }
                    
                    if(i+1 < n && grid[i+1][j] == '1')
                    {
                        int p1 = findPar(i*m+j);
                        int p2 = findPar((i+1)*m+j);
                        if(p1 != p2)
                        {
                            par[p1] = p2;
                            noOfOnes--;
                        }
                    }
                }
            }
        }
        
        return noOfOnes;
        
    }
};
class Solution {
public:
    
    bool sudoku_02(vector<vector<char>>& board,vector<int>& call,int idx,vector<int>& row,vector<int>& col,vector<vector<int>>& mat)
    {
        if(idx == call.size())
        {
            return true;
        }

        int r = call[idx]/9;
        int c = call[idx]%9;


        for(int num=1;num<=9;num++)
        {   
            int mask = (1 << num);
            if( !(row[r] & mask) && !(col[c] & mask) && !(mat[r/3][c/3] & mask) )
            {
                board[r][c] = (char)(num + '0');
                row[r] ^= (1 << num);
                col[c] ^= (1 << num);
                mat[r/3][c/3] ^= (1 << num);
                if(sudoku_02(board,call,idx+1,row,col,mat)) return true;
                row[r] ^= (1 << num);
                col[c] ^= (1 << num);
                mat[r/3][c/3] ^= (1 << num);
                board[r][c] = '.';
            }
        }

        return false;
    }
    void solveSudoku(vector<vector<char>>& board) {
        
        vector<int> row(9,0);
        vector<int> col(9,0);
        vector<vector<int>> mat(3,vector<int>(3,0));
        vector<int> call;
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(board[i][j] == '.')
                {
                    call.push_back(i*9+j);
                }
                else
                {
                    int mask = (1 << (board[i][j] - '0'));
                    row[i] ^= mask;
                    col[j] ^= mask;
                    mat[i/3][j/3] ^= mask;
                }
            }
        }
        bool c = sudoku_02(board,call,0,row,col,mat);
    }
};
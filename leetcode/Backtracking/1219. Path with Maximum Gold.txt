vector<vector<int>> v = {{0,1},{1,0},{-1,0},{0,-1}};
    bool isValid(int r, int c, vector<vector<int>> &grid, vector<vector<int>> &check)
    {
        if(r<0 || c<0 || r >= grid.size() || c >= grid[0].size() || grid[r][c] == 0 || check[r][c] == 1)
            return 0;
        else return 1;
    }
    int helper(int s, int e, vector<vector<int>> &grid, vector<vector<int>> &check)
    {
        check[s][e] = 1;
        int ans = grid[s][e];
        int sa = 0;
        for(int d=0;d<v.size();d++)
        {
            int r = v[d][0] + s;
            int c = v[d][1] + e;
            if(isValid(r,c,grid,check))
            {
                sa = max(sa,helper(r,c,grid,check));
            }

        }
        check[s][e] = 0;
        return ans+sa;

    }
    int getMaximumGold(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();
        int s = -1;
        int e = -1;
        int ans = 0;
        vector<vector<int> > check(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] != 0)
                {
                    s = i;
                    e = j;
                    int smallAns = helper(s,e,grid,check);
                    ans = max(ans,smallAns);

                }
            }
        }

        return ans;


    }